diff --git a/CMakeLists.txt b/CMakeLists.txt
index b74bf45..ba69d5a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -53,16 +53,17 @@ endif()
 string(APPEND CMAKE_CUDA_FLAGS "-DLIBCUDACXX_ENABLE_SIMPLIFIED_COMPLEX_OPERATIONS")
 
 if(LINUX)
-  include(cmake/CheckAbi.cmake)
-  string(APPEND CMAKE_CXX_FLAGS " -D_GLIBCXX_USE_CXX11_ABI=${GLIBCXX_USE_CXX11_ABI}")
-  string(APPEND CMAKE_CUDA_FLAGS " -D_GLIBCXX_USE_CXX11_ABI=${GLIBCXX_USE_CXX11_ABI}")
-  if(${GLIBCXX_USE_CXX11_ABI} EQUAL 1)
-    set(CXX_STANDARD_REQUIRED ON)
-  else()
-    # Please note this is required in order to ensure compatibility between gcc 9 and gcc 7
-    # This could be removed when all Linux PyTorch binary builds are compiled by the same toolchain again
-    append_cxx_flag_if_supported("-fabi-version=11" CMAKE_CXX_FLAGS)
-  endif()
+  # Handled by Conan CMakeToolchain
+  # include(cmake/CheckAbi.cmake)
+  # string(APPEND CMAKE_CXX_FLAGS " -D_GLIBCXX_USE_CXX11_ABI=${GLIBCXX_USE_CXX11_ABI}")
+  # string(APPEND CMAKE_CUDA_FLAGS " -D_GLIBCXX_USE_CXX11_ABI=${GLIBCXX_USE_CXX11_ABI}")
+  # if(${GLIBCXX_USE_CXX11_ABI} EQUAL 1)
+  #   set(CXX_STANDARD_REQUIRED ON)
+  # else()
+  #   # Please note this is required in order to ensure compatibility between gcc 9 and gcc 7
+  #   # This could be removed when all Linux PyTorch binary builds are compiled by the same toolchain again
+  #   append_cxx_flag_if_supported("-fabi-version=11" CMAKE_CXX_FLAGS)
+  # endif()
 endif()
 
 set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
@@ -383,8 +384,8 @@ if(WIN32)
       libuv_tmp_LIBRARY
       NAMES uv libuv
       HINTS $ENV{CONDA_PREFIX}\\Library $ENV{PREFIX}\\Library
-      PATH_SUFFIXES lib
-      NO_DEFAULT_PATH)
+      PATH_SUFFIXES lib)
+     # NO_DEFAULT_PATH)
     if(NOT libuv_tmp_LIBRARY)
       set(USE_DISTRIBUTED OFF)
       set(USE_GLOO OFF)
diff --git a/aten/src/ATen/CMakeLists.txt b/aten/src/ATen/CMakeLists.txt
index bf425af..ed99650 100644
--- a/aten/src/ATen/CMakeLists.txt
+++ b/aten/src/ATen/CMakeLists.txt
@@ -455,15 +455,17 @@ if(NOT MSVC AND NOT EMSCRIPTEN AND NOT INTERN_BUILD_MOBILE)
     list(APPEND ATen_THIRD_PARTY_INCLUDE ${CMAKE_BINARY_DIR}/include)
     link_directories(${CMAKE_BINARY_DIR}/sleef/lib)
   else()
-    add_library(sleef SHARED IMPORTED)
-    find_library(SLEEF_LIBRARY sleef)
-    if(NOT SLEEF_LIBRARY)
-      message(FATAL_ERROR "Cannot find sleef")
-    endif()
+    # add_library(sleef SHARED IMPORTED)
+    # find_library(SLEEF_LIBRARY sleef)
+    # if(NOT SLEEF_LIBRARY)
+    #   message(FATAL_ERROR "Cannot find sleef")
+    # endif()
+    find_package(sleef REQUIRED)
     message("Found sleef: ${SLEEF_LIBRARY}")
-    set_target_properties(sleef PROPERTIES IMPORTED_LOCATION "${SLEEF_LIBRARY}")
+    # set_target_properties(sleef PROPERTIES IMPORTED_LOCATION "${SLEEF_LIBRARY}")
   endif()
   list(APPEND ATen_CPU_DEPENDENCY_LIBS sleef)
+  list(APPEND ATen_CPU_INCLUDE ${sleef_INCLUDE_DIRS}) # needed by torch_cpu
 
   set(CMAKE_C_FLAGS_DEBUG ${OLD_CMAKE_C_FLAGS_DEBUG})
   set(CMAKE_CXX_FLAGS ${OLD_CMAKE_CXX_FLAGS})
diff --git a/c10/CMakeLists.txt b/c10/CMakeLists.txt
index 1f742f4..bb35e4f 100644
--- a/c10/CMakeLists.txt
+++ b/c10/CMakeLists.txt
@@ -87,7 +87,7 @@ endif()
 if(C10_USE_GLOG)
   target_link_libraries(c10 PUBLIC glog::glog)
 endif()
-target_link_libraries(c10 PRIVATE fmt::fmt-header-only)
+target_link_libraries(c10 PRIVATE fmt::fmt)
 
 if(C10_USE_NUMA)
   message(STATUS "NUMA paths:")
diff --git a/cmake/Dependencies.cmake b/cmake/Dependencies.cmake
index a960752..33b3429 100644
--- a/cmake/Dependencies.cmake
+++ b/cmake/Dependencies.cmake
@@ -409,12 +409,13 @@ if(INTERN_BUILD_MOBILE OR NOT DISABLE_NNPACK_AND_FAMILY)
 
   if(NOT TARGET pthreadpool)
     if(USE_SYSTEM_PTHREADPOOL)
-      add_library(pthreadpool SHARED IMPORTED)
-      find_library(PTHREADPOOL_LIBRARY pthreadpool)
-      set_property(TARGET pthreadpool PROPERTY IMPORTED_LOCATION "${PTHREADPOOL_LIBRARY}")
-      if(NOT PTHREADPOOL_LIBRARY)
-        message(FATAL_ERROR "Cannot find pthreadpool")
-      endif()
+      find_package(pthreadpool REQUIRED)
+      # add_library(pthreadpool SHARED IMPORTED)
+      # find_library(PTHREADPOOL_LIBRARY pthreadpool)
+      # set_property(TARGET pthreadpool PROPERTY IMPORTED_LOCATION "${PTHREADPOOL_LIBRARY}")
+      # if(NOT PTHREADPOOL_LIBRARY)
+      #   message(FATAL_ERROR "Cannot find pthreadpool")
+      # endif()
       message("-- Found pthreadpool: ${PTHREADPOOL_LIBRARY}")
     elseif(NOT USE_INTERNAL_PTHREADPOOL_IMPL)
       if(NOT DEFINED PTHREADPOOL_SOURCE_DIR)
@@ -443,6 +444,7 @@ else()
 endif()
 
 if(NOT CMAKE_SYSTEM_PROCESSOR MATCHES "^(s390x|ppc64le)$")
+  find_package(cpuinfo REQUIRED)
   # ---[ Caffe2 uses cpuinfo library in the thread pool
   # ---[ But it doesn't support s390x/powerpc and thus not used on s390x/powerpc
   if(NOT TARGET cpuinfo AND USE_SYSTEM_CPUINFO)
@@ -661,12 +663,13 @@ if(USE_XNNPACK AND NOT USE_SYSTEM_XNNPACK)
   include_directories(SYSTEM ${XNNPACK_INCLUDE_DIR})
   list(APPEND Caffe2_DEPENDENCY_LIBS XNNPACK)
 elseif(NOT TARGET XNNPACK AND USE_SYSTEM_XNNPACK)
-  add_library(XNNPACK SHARED IMPORTED)
-  find_library(XNNPACK_LIBRARY XNNPACK)
-  set_property(TARGET XNNPACK PROPERTY IMPORTED_LOCATION "${XNNPACK_LIBRARY}")
-  if(NOT XNNPACK_LIBRARY)
-    message(FATAL_ERROR "Cannot find XNNPACK")
-  endif()
+  # add_library(XNNPACK SHARED IMPORTED)
+  # find_library(XNNPACK_LIBRARY XNNPACK)
+  # set_property(TARGET XNNPACK PROPERTY IMPORTED_LOCATION "${XNNPACK_LIBRARY}")
+  # if(NOT XNNPACK_LIBRARY)
+  #   message(FATAL_ERROR "Cannot find XNNPACK")
+  # endif()
+  find_package(xnnpack REQUIRED)
   message("-- Found XNNPACK: ${XNNPACK_LIBRARY}")
   list(APPEND Caffe2_DEPENDENCY_LIBS XNNPACK)
 endif()
@@ -1012,18 +1015,18 @@ list(APPEND Caffe2_DEPENDENCY_LIBS fp16)
 set(EIGEN_MPL2_ONLY 1)
 if(USE_SYSTEM_EIGEN_INSTALL)
   find_package(Eigen3)
-  if(EIGEN3_FOUND)
-    message(STATUS "Found system Eigen at " ${EIGEN3_INCLUDE_DIR})
+  if(Eigen3_FOUND)
+    message(STATUS "Found system Eigen at " ${Eigen3_INCLUDE_DIR})
   else()
     message(STATUS "Did not find system Eigen. Using third party subdirectory.")
-    set(EIGEN3_INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR}/../third_party/eigen)
+    set(Eigen3_INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR}/../third_party/eigen)
     caffe2_update_option(USE_SYSTEM_EIGEN_INSTALL OFF)
   endif()
 else()
   message(STATUS "Using third party subdirectory Eigen.")
   set(EIGEN3_INCLUDE_DIR ${CMAKE_CURRENT_LIST_DIR}/../third_party/eigen)
 endif()
-include_directories(SYSTEM ${EIGEN3_INCLUDE_DIR})
+include_directories(SYSTEM ${Eigen3_INCLUDE_DIR})
 
 # ---[ Python + Numpy
 if(BUILD_PYTHON)
@@ -1577,7 +1580,8 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
       set_target_properties(onnx_proto PROPERTIES CXX_STANDARD 17)
     endif()
   endif()
-  add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/../third_party/foxi EXCLUDE_FROM_ALL)
+  find_package(foxi REQUIRED)
+  # add_subdirectory(${CMAKE_CURRENT_LIST_DIR}/../third_party/foxi EXCLUDE_FROM_ALL)
 
   add_definitions(-DONNX_NAMESPACE=${ONNX_NAMESPACE})
   if(NOT USE_SYSTEM_ONNX)
@@ -1595,23 +1599,25 @@ if(CAFFE2_CMAKE_BUILDING_WITH_MAIN_REPO AND NOT INTERN_DISABLE_ONNX)
       target_compile_options(onnx PRIVATE -Wno-deprecated-declarations)
     endif()
   else()
-    add_library(onnx SHARED IMPORTED)
-    find_library(ONNX_LIBRARY onnx)
-    if(NOT ONNX_LIBRARY)
-      message(FATAL_ERROR "Cannot find onnx")
-    endif()
-    set_property(TARGET onnx PROPERTY IMPORTED_LOCATION ${ONNX_LIBRARY})
-    add_library(onnx_proto SHARED IMPORTED)
-    find_library(ONNX_PROTO_LIBRARY onnx_proto)
-    if(NOT ONNX_PROTO_LIBRARY)
-      message(FATAL_ERROR "Cannot find onnx")
-    endif()
-    set_property(TARGET onnx_proto PROPERTY IMPORTED_LOCATION ${ONNX_PROTO_LIBRARY})
+    # add_library(onnx SHARED IMPORTED)
+    # find_library(ONNX_LIBRARY onnx)
+    # if(NOT ONNX_LIBRARY)
+    #   message(FATAL_ERROR "Cannot find onnx")
+    # endif()
+    # set_property(TARGET onnx PROPERTY IMPORTED_LOCATION ${ONNX_LIBRARY})
+    # add_library(onnx_proto SHARED IMPORTED)
+    # find_library(ONNX_PROTO_LIBRARY onnx_proto)
+    # if(NOT ONNX_PROTO_LIBRARY)
+    #   message(FATAL_ERROR "Cannot find onnx")
+    # endif()
+    # set_property(TARGET onnx_proto PROPERTY IMPORTED_LOCATION ${ONNX_PROTO_LIBRARY})
+    find_package(ONNX REQUIRED)
     message("-- Found onnx: ${ONNX_LIBRARY} ${ONNX_PROTO_LIBRARY}")
+    include_directories(${ONNX_INCLUDE_DIRS})
     list(APPEND Caffe2_DEPENDENCY_LIBS onnx_proto onnx)
   endif()
   include_directories(${FOXI_INCLUDE_DIRS})
-  list(APPEND Caffe2_DEPENDENCY_LIBS foxi_loader)
+  list(APPEND Caffe2_DEPENDENCY_LIBS foxi::foxi)
   # Recover the build shared libs option.
   set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS})
 endif()
@@ -1844,7 +1850,7 @@ endif()
 #
 set(TEMP_BUILD_SHARED_LIBS ${BUILD_SHARED_LIBS})
 set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build shared libs" FORCE)
-add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
+# add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 
 # Disable compiler feature checks for `fmt`.
 #
@@ -1853,9 +1859,10 @@ add_subdirectory(${PROJECT_SOURCE_DIR}/third_party/fmt)
 # CMAKE_CXX_FLAGS in ways that break feature checks. Since we already know
 # `fmt` is compatible with a superset of the compilers that PyTorch is, it
 # shouldn't be too bad to just disable the checks.
-set_target_properties(fmt-header-only PROPERTIES INTERFACE_COMPILE_FEATURES "")
+# set_target_properties(fmt-header-only PROPERTIES INTERFACE_COMPILE_FEATURES "")
 
-list(APPEND Caffe2_DEPENDENCY_LIBS fmt::fmt-header-only)
+find_package(fmt REQUIRED)
+list(APPEND Caffe2_DEPENDENCY_LIBS fmt::fmt)
 set(BUILD_SHARED_LIBS ${TEMP_BUILD_SHARED_LIBS} CACHE BOOL "Build shared libs" FORCE)
 
 # ---[ Kineto
diff --git a/cmake/Modules/FindBLAS.cmake b/cmake/Modules/FindBLAS.cmake
index 4d5007c..ac6cac7 100644
--- a/cmake/Modules/FindBLAS.cmake
+++ b/cmake/Modules/FindBLAS.cmake
@@ -13,6 +13,7 @@
 #  BLAS_INCLUDE_DIR - include directory
 
 # Do nothing if BLAS was found before
+INCLUDE(CheckFunctionExists)
 IF(NOT BLAS_FOUND)
 
 SET(BLAS_LIBRARIES)
diff --git a/torch/CMakeLists.txt b/torch/CMakeLists.txt
index 97a72ee..f3cd808 100644
--- a/torch/CMakeLists.txt
+++ b/torch/CMakeLists.txt
@@ -80,7 +80,7 @@ set(TORCH_PYTHON_LINK_LIBRARIES
     python::python
     pybind::pybind11
     shm
-    fmt::fmt-header-only
+    fmt::fmt
     ATEN_CPU_FILES_GEN_LIB)
 
 if(USE_ASAN AND TARGET Sanitizer::address)
diff --git a/torchgen/utils.py b/torchgen/utils.py
index 66ecbb9..a3f4482 100644
--- a/torchgen/utils.py
+++ b/torchgen/utils.py
@@ -26,7 +26,7 @@ from typing import (
     Union,
 )
 
-from typing_extensions import Self
+# from typing_extensions import Self
 
 from torchgen.code_template import CodeTemplate
 
@@ -488,7 +488,7 @@ class OrderedSet(Generic[T]):
     def __or__(self, other: "OrderedSet[T]") -> "OrderedSet[T]":
         return OrderedSet.union(self, other)
 
-    def __ior__(self, other: "OrderedSet[T]") -> Self:
+    def __ior__(self, other: "OrderedSet[T]"): # -> Self:
         self.update(other)
         return self
 
